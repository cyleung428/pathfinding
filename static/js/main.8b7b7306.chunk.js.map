{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/AStar.js","Nav/Nav.jsx","MainText/MainText.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/bfs.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","manhattanDistance","nodeA","nodeB","Math","abs","NavBar","algorithm","reset","visualizePath","changeAlgorithm","Navbar","bg","Brand","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","Item","onClick","MainText","PathfindingVisualizer","getInitialGrid","grid","currentRow","push","createNode","state","startRow","startCol","finishRow","finishCol","distance","Infinity","isVisited","previousNode","estimateDistance","getNewGridWithWallToggled","newGrid","slice","node","newNode","getNewGridWithStartToggled","oldNode","oldStart","setState","getNewGridWithFinishToggled","visualizeBFS","visualizeAStar","mouseIsPressed","mouseIsPressedOnStart","mouseIsPressedOnFinish","moving","movingStartPoint","movingFinishPoint","visitedNodesInOrder","nodesInShortestPathOrder","prevState","i","length","setTimeout","animateShortestPath","document","getElementById","startNode","finishNode","height","queue","currentNode","shift","bfs","unshift","getNodesInShortestPathOrder","animateBFS","console","log","openQueue","reduce","prev","curr","index","indexOf","splice","aStar","getNodesInShortestPathOrderAStar","j","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8b7b7306.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","export function aStar(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  console.log(manhattanDistance(startNode, finishNode));\r\n  let height = grid.length;\r\n  let length = grid[0].length;\r\n  let visitedNodesInOrder = [];\r\n  let openQueue = [];\r\n  startNode.distance = 0;\r\n  startNode.estimateDistance = manhattanDistance(startNode, finishNode);\r\n  openQueue.push(startNode);\r\n  while (openQueue.length !== 0) {\r\n    let currentNode = openQueue.reduce(function (prev, curr) {\r\n      return prev.estimateDistance < curr.estimateDistance ? prev : curr;\r\n    });\r\n    let index = openQueue.indexOf(currentNode);\r\n    openQueue.splice(index, 1);\r\n    currentNode.isVisited = true;\r\n    let row = currentNode.row;\r\n    let col = currentNode.col;\r\n    if (currentNode.isWall) {\r\n      continue;\r\n    }\r\n    visitedNodesInOrder.push(grid[row][col]);\r\n    if (grid[row][col] === finishNode) {\r\n      break;\r\n    }\r\n    if (row - 1 >= 0) {\r\n      if (\r\n        grid[row - 1][col].estimateDistance >\r\n        currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row - 1][col], finishNode)\r\n      ) {\r\n        grid[row - 1][col].distance = currentNode.distance + 1;\r\n        grid[row - 1][col].estimateDistance =\r\n          currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row - 1][col], finishNode);\r\n        grid[row - 1][col].previousNode = grid[row][col];\r\n        openQueue.push(grid[row - 1][col]);\r\n      }\r\n    }\r\n    if (col - 1 >= 0) {\r\n      if (\r\n        grid[row][col - 1].estimateDistance >\r\n        currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row][col - 1], finishNode)\r\n      ) {\r\n        grid[row][col - 1].distance = currentNode.distance + 1;\r\n        grid[row][col - 1].estimateDistance =\r\n          currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row][col - 1], finishNode);\r\n        grid[row][col - 1].previousNode = grid[row][col];\r\n        openQueue.push(grid[row][col - 1]);\r\n      }\r\n    }\r\n    if (row + 1 < height) {\r\n      if (\r\n        grid[row + 1][col].estimateDistance >\r\n        currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row + 1][col], finishNode)\r\n      ) {\r\n        grid[row + 1][col].distance = currentNode.distance + 1;\r\n        grid[row + 1][col].estimateDistance =\r\n          currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row + 1][col], finishNode);\r\n        grid[row + 1][col].previousNode = grid[row][col];\r\n        openQueue.push(grid[row + 1][col]);\r\n      }\r\n    }\r\n    if (col + 1 < length) {\r\n      if (\r\n        grid[row][col + 1].estimateDistance >\r\n        currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row][col + 1], finishNode)\r\n      ) {\r\n        grid[row][col + 1].distance = currentNode.distance + 1;\r\n        grid[row][col + 1].estimateDistance =\r\n          currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row][col + 1], finishNode);\r\n        grid[row][col + 1].previousNode = grid[row][col];\r\n        openQueue.push(grid[row][col + 1]);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAStar(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\nfunction manhattanDistance(nodeA, nodeB) {\r\n  return Math.abs(nodeB.col - nodeA.col) + Math.abs(nodeB.row - nodeA.row);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { NavDropdown } from \"react-bootstrap\";\r\n\r\nexport default class NavBar extends Component {\r\n  render() {\r\n    const { algorithm, reset, visualizePath, changeAlgorithm } = this.props;\r\n    return (\r\n      <Navbar bg=\"light\">\r\n        <Navbar.Brand>Pathfinding Visualization</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link>Home</Nav.Link>\r\n            <NavDropdown title=\"Algorithm\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item onClick={() => changeAlgorithm(\"BFS\")}>\r\n                BFS\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={() => changeAlgorithm(\"AStar\")}>\r\n                A*\r\n              </NavDropdown.Item>\r\n              {/* <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">\r\n                Separated link\r\n              </NavDropdown.Item> */}\r\n            </NavDropdown>\r\n            <Nav.Link onClick={() => reset()}>Reset</Nav.Link>\r\n            <Nav.Link onClick={() => visualizePath()}>\r\n              Visualize {algorithm}\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./MainText.css\";\r\n\r\nexport default class MainText extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"showText\">\r\n        <ul>\r\n          <li>\r\n            <div className=\"show-node show-node-start\"></div>\r\n            Start Node\r\n          </li>\r\n          <li>\r\n            <div className=\"show-node show-node-finish\"></div>\r\n            Target Node\r\n          </li>\r\n          <li>\r\n            <div className=\"show-node show-node-visited\"></div>\r\n            Visited Node\r\n          </li>\r\n          <li>\r\n            <div className=\"show-node show-node-wall\"></div>\r\n            Wall\r\n          </li>\r\n          <li>\r\n            <div className=\"show-node show-node-shortest-path\"></div>\r\n            Shortest Path\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { bfs, getNodesInShortestPathOrder } from \"../algorithms/bfs\";\r\nimport { aStar, getNodesInShortestPathOrderAStar } from \"../algorithms/AStar\";\r\nimport NavBar from \"../Nav/Nav\";\r\nimport MainText from \"../MainText/MainText\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      mouseIsPressedOnStart: false,\r\n      mouseIsPressedOnFinish: false,\r\n      moving: false,\r\n      movingStartPoint: false,\r\n      movingFinishPoint: false,\r\n      startRow: 10,\r\n      startCol: 15,\r\n      finishRow: 10,\r\n      finishCol: 35,\r\n      algorithm: \"BFS\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n  handleMouseDown(row, col) {\r\n    const { startRow, startCol, finishRow, finishCol } = this.state;\r\n    if (row === startRow && col === startCol) {\r\n      this.setState({ mouseIsPressedOnStart: true });\r\n    } else if (row === finishRow && col === finishCol) {\r\n      this.setState({ mouseIsPressedOnFinish: true });\r\n    } else {\r\n      const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    const {\r\n      mouseIsPressedOnStart,\r\n      mouseIsPressedOnFinish,\r\n      mouseIsPressed,\r\n      startRow,\r\n      startCol,\r\n      finishRow,\r\n      finishCol,\r\n    } = this.state;\r\n    if (mouseIsPressedOnStart) {\r\n      if (row === finishRow && col === finishCol) {\r\n        return;\r\n      }\r\n      const newGrid = this.getNewGridWithStartToggled(\r\n        this.state.grid,\r\n        row,\r\n        col\r\n      );\r\n      this.setState({ grid: newGrid });\r\n    } else if (mouseIsPressedOnFinish) {\r\n      if (row === startRow && col === startCol) {\r\n        return;\r\n      }\r\n      const newGrid = this.getNewGridWithFinishToggled(\r\n        this.state.grid,\r\n        row,\r\n        col\r\n      );\r\n      this.setState({ grid: newGrid });\r\n    } else if (mouseIsPressed) {\r\n      const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({\r\n      mouseIsPressed: false,\r\n      mouseIsPressedOnStart: false,\r\n      mouseIsPressedOnFinish: false,\r\n    });\r\n  }\r\n  animateBFS(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    this.setState((prevState) => ({\r\n      moving: !prevState.moving,\r\n    }));\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  }\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n      if (i === nodesInShortestPathOrder.length - 1) {\r\n        setTimeout(() => {\r\n          this.setState((prevState) => ({\r\n            moving: !prevState.moving,\r\n          }));\r\n        }, 10 * i + 1500);\r\n      }\r\n    }\r\n  }\r\n  visualizeBFS() {\r\n    const { grid, startRow, startCol, finishRow, finishCol } = this.state;\r\n    const startNode = grid[startRow][startCol];\r\n    const finishNode = grid[finishRow][finishCol];\r\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n    if (visitedNodesInOrder.length === 0) return;\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(\r\n      visitedNodesInOrder[visitedNodesInOrder.length - 1]\r\n    );\r\n    this.animateBFS(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeAStar() {\r\n    const { grid, startRow, startCol, finishRow, finishCol } = this.state;\r\n    const startNode = grid[startRow][startCol];\r\n    const finishNode = grid[finishRow][finishCol];\r\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\r\n    if (visitedNodesInOrder.length === 0) return;\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderAStar(\r\n      visitedNodesInOrder[visitedNodesInOrder.length - 1]\r\n    );\r\n    this.animateBFS(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  reset() {\r\n    const { startRow, startCol, finishRow, finishCol } = this.state;\r\n    if (!this.state.moving) {\r\n      for (let i = 0; i < 50; i++) {\r\n        for (let j = 0; j < 80; j++) {\r\n          if (i === startRow && j === startCol) {\r\n            document.getElementById(`node-${i}-${j}`).className =\r\n              \"node node-start\";\r\n          } else if (i === finishRow && j === finishCol) {\r\n            document.getElementById(`node-${i}-${j}`).className =\r\n              \"node node-finish\";\r\n          } else {\r\n            document.getElementById(`node-${i}-${j}`).className = \"node\";\r\n          }\r\n        }\r\n      }\r\n      const grid = this.getInitialGrid();\r\n      this.setState({ grid: grid });\r\n    }\r\n  }\r\n\r\n  getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 50; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 80; col++) {\r\n        currentRow.push(this.createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n  createNode = (col, row) => {\r\n    return {\r\n      col,\r\n      row,\r\n      isStart: row === this.state.startRow && col === this.state.startCol,\r\n      isFinish: row === this.state.finishRow && col === this.state.finishCol,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      estimateDistance: Infinity,\r\n    };\r\n  };\r\n\r\n  getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n  };\r\n\r\n  getNewGridWithStartToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      isStart: true,\r\n    };\r\n    const oldNode = newGrid[this.state.startRow][this.state.startCol];\r\n    const oldStart = {\r\n      ...oldNode,\r\n      isStart: false,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    newGrid[this.state.startRow][this.state.startCol] = oldStart;\r\n    this.setState({ startRow: row, startCol: col });\r\n    return newGrid;\r\n  };\r\n\r\n  getNewGridWithFinishToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      isFinish: true,\r\n    };\r\n    const oldNode = newGrid[this.state.finishRow][this.state.finishCol];\r\n    const oldStart = {\r\n      ...oldNode,\r\n      isFinish: false,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    newGrid[this.state.finishRow][this.state.finishCol] = oldStart;\r\n    this.setState({ finishRow: row, finishCol: col });\r\n    return newGrid;\r\n  };\r\n\r\n  visualizePath = () => {\r\n    const { algorithm } = this.state;\r\n    switch (algorithm) {\r\n      case \"BFS\":\r\n        this.visualizeBFS();\r\n        break;\r\n      case \"AStar\":\r\n        this.visualizeAStar();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  changeAlgorithm = (algorithm) => {\r\n    this.setState({ algorithm: algorithm });\r\n  };\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed, algorithm } = this.state;\r\n    return (\r\n      <>\r\n        <NavBar\r\n          algorithm={algorithm}\r\n          reset={() => this.reset()}\r\n          visualizePath={() => this.visualizePath()}\r\n          changeAlgorithm={(algorithm) => this.changeAlgorithm(algorithm)}\r\n        ></NavBar>\r\n        <MainText></MainText>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div className=\"customRow\" key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { isStart, isFinish, isWall, row, col } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      col={col}\r\n                      row={row}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","export function bfs(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let height = grid.length;\r\n  let length = grid[0].length;\r\n  let visitedNodesInOrder = [];\r\n  let queue = [];\r\n  queue.push(startNode);\r\n  while (queue.length !== 0) {\r\n    let currentNode = queue.shift();\r\n    let row = currentNode.row;\r\n    let col = currentNode.col;\r\n    if (\r\n      row < 0 ||\r\n      col < 0 ||\r\n      row >= height ||\r\n      col >= length ||\r\n      grid[row][col].isVisited ||\r\n      grid[row][col].isWall\r\n    ) {\r\n      continue;\r\n    }\r\n    grid[row][col].isVisited = true;\r\n    visitedNodesInOrder.push(grid[row][col]);\r\n    if (grid[row][col] === finishNode) {\r\n      break;\r\n    }\r\n    if (row - 1 >= 0 && !grid[row - 1][col].isVisited) {\r\n      grid[row - 1][col].previousNode = grid[row][col];\r\n      queue.push(grid[row - 1][col]);\r\n    }\r\n    if (col - 1 >= 0 && !grid[row][col - 1].isVisited) {\r\n      grid[row][col - 1].previousNode = grid[row][col];\r\n      queue.push(grid[row][col - 1]);\r\n    }\r\n    if (row + 1 < height && !grid[row + 1][col].isVisited) {\r\n      grid[row + 1][col].previousNode = grid[row][col];\r\n      queue.push(grid[row + 1][col]);\r\n    }\r\n    if (col + 1 < length && !grid[row][col + 1].isVisited) {\r\n      grid[row][col + 1].previousNode = grid[row][col];\r\n      queue.push(grid[row][col + 1]);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React from \"react\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}