{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/AStar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/bfs.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","isVisited","id","className","Component","manhattanDistance","nodeA","nodeB","Math","abs","PathfindingVisualizer","getInitialGrid","grid","currentRow","push","createNode","distance","Infinity","previousNode","estimateDistance","getNewGridWithWallToggled","newGrid","slice","node","newNode","state","mouseIsPressed","moving","movingStartPoint","movingFinishPoint","startRow","startCol","finishRow","finishCol","setState","visitedNodesInOrder","nodesInShortestPathOrder","prevState","i","length","setTimeout","animateShortestPath","document","getElementById","startNode","finishNode","height","queue","currentNode","shift","bfs","unshift","getNodesInShortestPathOrder","animateBFS","console","log","openQueue","reduce","prev","curr","index","indexOf","splice","aStar","getNodesInShortestPathOrderAStar","j","onClick","visualizeBFS","visualizeAStar","reset","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6287776f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      isVisited,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","export function aStar(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  console.log(manhattanDistance(startNode, finishNode));\r\n  let height = grid.length;\r\n  let length = grid[0].length;\r\n  let visitedNodesInOrder = [];\r\n  let openQueue = [];\r\n  let closeQueue = [];\r\n  startNode.distance = 0;\r\n  startNode.estimateDistance = manhattanDistance(startNode, finishNode);\r\n  openQueue.push(startNode);\r\n  while (openQueue.length !== 0) {\r\n    let currentNode = openQueue.reduce(function (prev, curr) {\r\n      return prev.estimateDistance < curr.estimateDistance ? prev : curr;\r\n    });\r\n    let index = openQueue.indexOf(currentNode);\r\n    openQueue.splice(index, 1);\r\n    currentNode.isVisited = true;\r\n    let row = currentNode.row;\r\n    let col = currentNode.col;\r\n    if (currentNode.isWall) {\r\n      continue;\r\n    }\r\n    visitedNodesInOrder.push(grid[row][col]);\r\n    if (grid[row][col] === finishNode) {\r\n      break;\r\n    }\r\n    if (row - 1 >= 0) {\r\n      if (\r\n        grid[row - 1][col].estimateDistance >\r\n        currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row - 1][col], finishNode)\r\n      ) {\r\n        grid[row - 1][col].distance = currentNode.distance + 1;\r\n        grid[row - 1][col].estimateDistance =\r\n          currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row - 1][col], finishNode);\r\n        grid[row - 1][col].previousNode = grid[row][col];\r\n        openQueue.push(grid[row - 1][col]);\r\n      }\r\n    }\r\n    if (col - 1 >= 0) {\r\n      if (\r\n        grid[row][col - 1].estimateDistance >\r\n        currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row][col - 1], finishNode)\r\n      ) {\r\n        grid[row][col - 1].distance = currentNode.distance + 1;\r\n        grid[row][col - 1].estimateDistance =\r\n          currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row][col - 1], finishNode);\r\n        grid[row][col - 1].previousNode = grid[row][col];\r\n        openQueue.push(grid[row][col - 1]);\r\n      }\r\n    }\r\n    if (row + 1 < height) {\r\n      if (\r\n        grid[row + 1][col].estimateDistance >\r\n        currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row + 1][col], finishNode)\r\n      ) {\r\n        grid[row + 1][col].distance = currentNode.distance + 1;\r\n        grid[row + 1][col].estimateDistance =\r\n          currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row + 1][col], finishNode);\r\n        grid[row + 1][col].previousNode = grid[row][col];\r\n        openQueue.push(grid[row + 1][col]);\r\n      }\r\n    }\r\n    if (col + 1 < length) {\r\n      if (\r\n        grid[row][col + 1].estimateDistance >\r\n        currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row][col + 1], finishNode)\r\n      ) {\r\n        grid[row][col + 1].distance = currentNode.distance + 1;\r\n        grid[row][col + 1].estimateDistance =\r\n          currentNode.distance +\r\n          1 +\r\n          manhattanDistance(grid[row][col + 1], finishNode);\r\n        grid[row][col + 1].previousNode = grid[row][col];\r\n        openQueue.push(grid[row][col + 1]);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAStar(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\nfunction manhattanDistance(nodeA, nodeB) {\r\n  return Math.abs(nodeB.col - nodeA.col) + Math.abs(nodeB.row - nodeA.row);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { bfs, getNodesInShortestPathOrder } from \"../algorithms/bfs\";\r\nimport { aStar, getNodesInShortestPathOrderAStar } from \"../algorithms/AStar\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      moving: false,\r\n      movingStartPoint: false,\r\n      movingFinishPoint: false,\r\n      startRow: 10,\r\n      startCol: 15,\r\n      finishRow: 10,\r\n      finishCol: 35,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n  handleMouseDown(row, col) {\r\n    const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n  animateBFS(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    this.setState((prevState) => ({\r\n      moving: !prevState.moving,\r\n    }));\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  }\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n      if (i === nodesInShortestPathOrder.length - 1) {\r\n        setTimeout(() => {\r\n          this.setState((prevState) => ({\r\n            moving: !prevState.moving,\r\n          }));\r\n        }, 10 * i + 1500);\r\n      }\r\n    }\r\n  }\r\n  visualizeBFS() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(\r\n      visitedNodesInOrder[visitedNodesInOrder.length - 1]\r\n    );\r\n    this.animateBFS(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeAStar() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderAStar(\r\n      visitedNodesInOrder[visitedNodesInOrder.length - 1]\r\n    );\r\n    this.animateBFS(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  reset() {\r\n    if (!this.state.moving) {\r\n      for (let i = 0; i < 20; i++) {\r\n        for (let j = 0; j < 50; j++) {\r\n          if (i === START_NODE_ROW && j === START_NODE_COL) {\r\n            document.getElementById(`node-${i}-${j}`).className =\r\n              \"node node-start\";\r\n          } else if (i === FINISH_NODE_ROW && j === FINISH_NODE_COL) {\r\n            document.getElementById(`node-${i}-${j}`).className =\r\n              \"node node-finish\";\r\n          } else {\r\n            document.getElementById(`node-${i}-${j}`).className = \"node\";\r\n          }\r\n        }\r\n      }\r\n      const grid = this.getInitialGrid();\r\n      this.setState({ grid: grid });\r\n    }\r\n  }\r\n\r\n  getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        currentRow.push(this.createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n  createNode = (col, row) => {\r\n    return {\r\n      col,\r\n      row,\r\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      estimateDistance: Infinity,\r\n    };\r\n  };\r\n\r\n  getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n  };\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    return (\r\n      <>\r\n        <button onClick={() => this.visualizeBFS()}>\r\n          Visualize BFS algorithm\r\n        </button>\r\n        <button onClick={() => this.visualizeAStar()}>\r\n          Visualize A* algorithm\r\n        </button>\r\n        <button onClick={() => this.reset()}>Reset</button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { isStart, isFinish, isWall, row, col } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      col={col}\r\n                      row={row}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","export function bfs(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let height = grid.length;\r\n  let length = grid[0].length;\r\n  let visitedNodesInOrder = [];\r\n  let queue = [];\r\n  queue.push(startNode);\r\n  while (queue.length !== 0) {\r\n    let currentNode = queue.shift();\r\n    let row = currentNode.row;\r\n    let col = currentNode.col;\r\n    if (\r\n      row < 0 ||\r\n      col < 0 ||\r\n      row >= height ||\r\n      col >= length ||\r\n      grid[row][col].isVisited ||\r\n      grid[row][col].isWall\r\n    ) {\r\n      continue;\r\n    }\r\n    grid[row][col].isVisited = true;\r\n    visitedNodesInOrder.push(grid[row][col]);\r\n    if (grid[row][col] === finishNode) {\r\n      break;\r\n    }\r\n    if (row - 1 >= 0 && !grid[row - 1][col].isVisited) {\r\n      grid[row - 1][col].previousNode = grid[row][col];\r\n      queue.push(grid[row - 1][col]);\r\n    }\r\n    if (col - 1 >= 0 && !grid[row][col - 1].isVisited) {\r\n      grid[row][col - 1].previousNode = grid[row][col];\r\n      queue.push(grid[row][col - 1]);\r\n    }\r\n    if (row + 1 < height && !grid[row + 1][col].isVisited) {\r\n      grid[row + 1][col].previousNode = grid[row][col];\r\n      queue.push(grid[row + 1][col]);\r\n    }\r\n    if (col + 1 < length && !grid[row][col + 1].isVisited) {\r\n      grid[row][col + 1].previousNode = grid[row][col];\r\n      queue.push(grid[row][col + 1]);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React from \"react\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}